// Apply the java plugin to add support for Java
apply plugin: 'java'

apply plugin: 'java-library'
apply plugin: 'maven'

version = rootProject.version
description = 'Common implementation code'

configurations {
	coreContent
}

dependencies {
	//We need the core content distribution zip to be able to run the game !!!
	//coreContent group: 'xyz.chunkstories', name: 'core', version: contentRevisionBuiltAgainst, ext: 'zip'
	
	implementation 'com.github.Hugobros3:assimp:no-lwjgl-SNAPSHOT'
	//implementation 'com.github.kotlin-graphics:assimp:unspecified'
}

test {
	workingDir = rootProject.projectDir
	testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
	
	//We provide the tests the core content location !
	dependsOn ':common:setupContentLocation'
	doFirst {
		systemProperty 'coreContentLocation', rootProject.ext.actualContentLocation
		println rootProject.ext.actualContentLocation
	}
}

task setupContentLocation() {
	String actualContentLocation;
	
	//Supplied content location
	if(project.hasProperty('contentLocation')) {
		actualContentLocation = contentLocation
	} else {
		// Automagically grab the location within the maven local repo
		// actualContentLocation = "${configurations.coreContent.singleFile}";
		actualContentLocation = "../chunkstories-core/"
	}
	
	rootProject.ext.actualContentLocation = actualContentLocation
	
	doFirst {
		println "Setting up content location: " + actualContentLocation
		//args [args, [new String("--core="+actualContentLocation)]].flatten()
		//println "New args: " + args
	}
}

//Create a properties.gradle with login credentials to use this.
//Watch out: wagon-ssh is an old mess and WILL NOT TAKE EdDSA host keys
//You MUST ask the server for one of those and replace whatever you had for it in known_hosts
if(hasProperty('uploadUsername')) {
	println 'Login credentials found'
	uploadArchives {
		repositories {
				mavenDeployer {
       				configuration = configurations.deployerJars	
					
					if(project.hasProperty('uploadPrivateKey')) {
						println 'Found private key'
						repository(url: "scp://xol.io/home/maven-user/maven-repo") {				
							authentication(userName: uploadUsername, privateKey: uploadPrivateKey)
		    				}
					}
					else {
						println 'Found password'
						repository(url: "scp://xol.io/home/maven-user/maven-repo") {				
							authentication(userName: uploadUsername, password: uploadPassword)
		    				}
					}
				}
		}
	}
}
