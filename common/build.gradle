// Apply the java plugin to add support for Java
apply plugin: 'java'

apply plugin: 'java-library'
apply plugin: 'maven'

version = rootProject.version
description = 'Common implementation code'

configurations {
	coreContent
}

dependencies {
	compile group: 'xyz.chunkstories', name: 'api', version: apiRevisionBuiltAgainst
	
	//We need the core content distribution zip to be able to run the game !!!
	//coreContent group: 'xyz.chunkstories', name: 'core', version: contentRevisionBuiltAgainst, ext: 'zip'

	implementation group: 'com.github.kotlin-graphics.glm', name: 'glm', version: 'v0.9.9.0-build-13'
	implementation 'com.github.Hugobros3:assimp:no-lwjgl-SNAPSHOT'

	compile group: 'io.xol.enklume', name: 'enklume', version: 100
}

dependencies {
	//implementation 'com.github.kotlin-graphics:assimp:unspecified'
	compile group: 'org.fusesource.jansi', name: 'jansi', version: '1.15'
	compile group: 'org.l33tlabs.twl', name: 'pngdecoder', version: '1.0'
	compile group: 'net.jpountz.lz4', name: 'lz4', version: '1.3.0'

	compile group: 'com.googlecode.soundlibs', name: 'jorbis', version: '0.0.17.4'
	//TODO check if used
	compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
	compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
	compile 'org.hjson:hjson:1.0.0'

	compile group: 'com.carrotsearch', name: 'hppc', version: '0.7.2'

	compile group: 'ch.qos.logback', name: 'logback-core', version: '1.0.13'
	compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.0.13'

	compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'

	compile group: 'io.netty', name: 'netty-all', version: '4.1.18.Final'

	testCompile 'junit:junit:4.12'
}

/** LWJGL dependencies */
dependencies {
	compile "org.lwjgl:lwjgl:${rootProject.ext.lwjglVersion}"
	compile "org.lwjgl:lwjgl-jemalloc:${rootProject.ext.lwjglVersion}"
	compile "org.lwjgl:lwjgl-assimp:${rootProject.ext.lwjglVersion}"

	//When running on our debug computer, it's safe to assume the OS that will run the game is the same than the one who'll compile it.
	runtime "org.lwjgl:lwjgl:${rootProject.ext.lwjglVersion}:${rootProject.ext.lwjglNatives}"
	runtime "org.lwjgl:lwjgl-jemalloc:${rootProject.ext.lwjglVersion}:${rootProject.ext.lwjglNatives}"
	runtime "org.lwjgl:lwjgl-assimp:${rootProject.ext.lwjglVersion}:${rootProject.ext.lwjglNatives}"

	//When compiling a redistribuable jar, we need ALL natives in it!
	rootProject.ext.natives.each {
		multiplatform ("org.lwjgl:lwjgl:${rootProject.ext.lwjglVersion}:" + it)
		multiplatform "org.lwjgl:lwjgl-jemalloc:${rootProject.ext.lwjglVersion}:" + it
		multiplatform "org.lwjgl:lwjgl-assimp:${rootProject.ext.lwjglVersion}:" + it
	}
}

test {
	workingDir = rootProject.projectDir
	testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
	
	//We provide the tests the core content location !
	dependsOn ':common:setupContentLocation'
	doFirst {
		systemProperty 'coreContentLocation', rootProject.ext.actualContentLocation
		println rootProject.ext.actualContentLocation
	}
}

task setupContentLocation() {
	String actualContentLocation
	
	//Supplied content location
	if(project.hasProperty('contentLocation')) {
		actualContentLocation = contentLocation
	} else {
		// Automagically grab the location within the maven local repo
		// actualContentLocation = "${configurations.coreContent.singleFile}";
		actualContentLocation = "../chunkstories-core/"
	}
	
	rootProject.ext.actualContentLocation = actualContentLocation
	
	doFirst {
		println "Setting up content location: " + actualContentLocation
		//args [args, [new String("--core="+actualContentLocation)]].flatten()
		//println "New args: " + args
	}
}

//Create a properties.gradle with login credentials to use this.
//Watch out: wagon-ssh is an old mess and WILL NOT TAKE EdDSA host keys
//You MUST ask the server for one of those and replace whatever you had for it in known_hosts
if(hasProperty('uploadUsername')) {
	println 'Login credentials found'
	uploadArchives {
		repositories {
				mavenDeployer {
       				configuration = configurations.deployerJars	
					
					if(project.hasProperty('uploadPrivateKey')) {
						println 'Found private key'
						repository(url: "scp://xol.io/home/maven-user/maven-repo") {				
							authentication(userName: uploadUsername, privateKey: uploadPrivateKey)
		    				}
					}
					else {
						println 'Found password'
						repository(url: "scp://xol.io/home/maven-user/maven-repo") {				
							authentication(userName: uploadUsername, password: uploadPassword)
		    				}
					}
				}
		}
	}
}
