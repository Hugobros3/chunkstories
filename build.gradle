/*
 * Chunkstories main Gradle Build script
 *
 * Messy file, lots of plugins used. Applies a few of those to the subprojects
 */

import org.gradle.internal.os.OperatingSystem
import java.text.SimpleDateFormat

subprojects {
	repositories {
		mavenLocal()
		mavenCentral()
		jcenter()
		maven { url "http://maven.xol.io/repository/public/" }
		maven { url 'https://jitpack.io' }
		maven { url 'http://dl.bintray.com/kotlin/kotlin-eap'}
		maven {
			url 'http://oss.sonatype.org/content/repositories/snapshots/'
		}
	}
	
	buildscript {
		repositories {
			mavenCentral()
			//maven { url 'https://jitpack.io' }
			maven { url "http://maven.xol.io/repository/public/" }
			maven { url 'http://dl.bintray.com/kotlin/kotlin-eap'}
		}

		dependencies {
			classpath 'de.johni0702.gradle:gradle-ecj-plugin:1.1-JAVA9'
			//classpath 'com.github.johni0702:gradle-ecj-plugin:795736c7bd085c6ff3a5fbd3f5d2913c94fe589e'
		}
	}
	
	apply plugin: "com.github.hierynomus.license"
	
	license {
		header rootProject.file('codequality/header-include-notice.txt')
		strictCheck true
		
		mapping {
			java='DOUBLESLASH_STYLE'
		}
	}
}

buildscript {
	ext.kotlin_version = '1.3.10'

	repositories {
		maven { url "https://plugins.gradle.org/m2/" }
		maven { url 'http://dl.bintray.com/kotlin/kotlin-eap' }
	}
	dependencies {
		classpath "org.ajoberstar:grgit:2.1.0"
		classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.14.0"
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
	}
}

apply plugin: "org.ajoberstar.grgit"
import org.ajoberstar.grgit.Grgit

version = 'Alpha1.1'
description = 'A voxel game engine'
group = 'xyz.chunkstories'

ext {
	apiRevisionBuiltAgainst = '202'
	//contentRevisionBuiltAgainst = '130'
	
	useEclipseCompiler = false
	
	actualContentLocation = "core_content.zip" // Changed by the setupContentLocation task in common/ !!! Do not remove.
}

// Build every single artifact the project has
task buildAll {
	dependsOn ':client:shadowJar'
	dependsOn ':server:shadowJar'
	dependsOn ':converter:shadowJar'
	
	dependsOn ':common:jar'

	dependsOn ':launcher:createExe'
}

// Uploads all of the relevant artifacts to the Maven repo
task uploadAll {
	dependsOn ':client:uploadShadow'
	dependsOn ':server:uploadShadow'
	
	dependsOn ':common:uploadArchives'
}

task versionTxt {

	doLast {
		def file = new File("$projectDir/version.txt")
		file.createNewFile()
		file.text = """version: $version
		commit: ${Grgit.open(dir: "$projectDir").head().id}
		buildtime: ${new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(new Date())}
		"""
	}
}

repositories {
	mavenLocal()
	mavenCentral()
}

//Print it to the console
if(ext.useEclipseCompiler) {
	println "Using ECJ compiler"
}

subprojects { subproject ->

	//Put them all in the xyz.chunkstories group.
	group = rootProject.group

	plugins.withType(JavaPlugin) 
	{
		//Use the ECJ compiler if requested
		if(rootProject.ext.useEclipseCompiler) {
			subproject.apply plugin: 'de.johni0702.ecj'
		}

		//Setups compilation args
		compileJava.options.compilerArgs << '-Xlint:-deprecation'
		compileJava.options.compilerArgs << '-Xlint:none'
			
		compileJava.options.encoding = 'utf-8'

		sourceCompatibility = '1.8'
		targetCompatibility = '1.8'

		subproject.apply plugin: 'kotlin'
		dependencies {
			implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
			implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
		}

		/** LWJGL Configuration */
		switch ( OperatingSystem.current() ) {
			case OperatingSystem.WINDOWS:
				project.ext.lwjglNatives = "natives-windows"
				break
			case OperatingSystem.LINUX:
				project.ext.lwjglNatives = "natives-linux"
			break
			case OperatingSystem.MAC_OS:
				project.ext.lwjglNatives = "natives-macos"
				break
		}

		project.ext.natives = ["natives-windows", "natives-linux", "natives-macos"];
		project.ext.lwjglVersion = "3.2.2-SNAPSHOT"

		configurations {
			multiplatform {
				extendsFrom runtime
			}
		}

		/** LWJGL dependencies */
		dependencies {
			compile "org.lwjgl:lwjgl:${lwjglVersion}"
			compile "org.lwjgl:lwjgl-jemalloc:${lwjglVersion}"
			compile "org.lwjgl:lwjgl-assimp:${lwjglVersion}"

			//When running on our debug computer, it's safe to assume the OS that will run the game is the same than the one who'll compile it.
			runtime "org.lwjgl:lwjgl:${lwjglVersion}:${lwjglNatives}"
			runtime "org.lwjgl:lwjgl-jemalloc:${lwjglVersion}:${lwjglNatives}"
			runtime "org.lwjgl:lwjgl-assimp:${lwjglVersion}:${lwjglNatives}"

			//When compiling a redistribuable jar, we need ALL natives in it!
			project.ext.natives.each {
				multiplatform ("org.lwjgl:lwjgl:${lwjglVersion}:" + it)
				multiplatform "org.lwjgl:lwjgl-jemalloc:${lwjglVersion}:" + it
				multiplatform "org.lwjgl:lwjgl-assimp:${lwjglVersion}:" + it
			}
		}

		/** Other dependencies */
		dependencies {
			compile group: 'org.fusesource.jansi', name: 'jansi', version: '1.15'
			compile group: 'org.l33tlabs.twl', name: 'pngdecoder', version: '1.0'
			compile group: 'net.jpountz.lz4', name: 'lz4', version: '1.3.0'

			compile group: 'com.googlecode.soundlibs', name: 'jorbis', version: '0.0.17.4'
			//TODO check if used
			compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
			compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
			compile 'org.hjson:hjson:1.0.0'

			compile group: 'com.carrotsearch', name: 'hppc', version: '0.7.2'
			
			compile group: 'xyz.chunkstories', name: 'api', version: apiRevisionBuiltAgainst
			compile group: 'io.xol.enklume', name: 'enklume', version: 100
			
			compile group: 'ch.qos.logback', name: 'logback-core', version: '1.0.13'
			compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.0.13'
			
			compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'

			compile group: 'io.netty', name: 'netty-all', version: '4.1.18.Final'
			//compile group: 'com.jfastnet', name: 'jfastnet', version: '0.3.1'
			
			testCompile 'junit:junit:4.12'
		}
	}

	//Makes this available everywhere
	ext {
		apiRevisionBuiltAgainst = rootProject.apiRevisionBuiltAgainst
	}
	
	//Adds this debug task
	task artifacts {
		group = "Help"
			description = "Displays the artifacts associated with each configuration of " + project
			doFirst {
				configurations.findAll().each { config ->
				println "${config}:"
				config.artifacts.getFiles().each { file -> println "" + file}
				println ' '
			}
		}
	}

	// SSH artifact uploading nonsense
	configurations {
		deployerJars
	}

	dependencies {
		deployerJars "org.apache.maven.wagon:wagon-ssh:3.0.0"
	}
}

