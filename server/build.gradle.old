// Apply the java plugin to add support for Java
apply plugin: 'java'

// Apply the application plugin to add support for building an application
apply plugin: 'application'

version = rootProject.version
description = 'Multiplayer server'

buildscript {
	repositories {
	        jcenter()
	}
	dependencies {
		classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.2'
	}
}

apply plugin: 'com.github.johnrengelman.shadow'

// Define the main class for the application
mainClassName = 'xyz.chunkstories.server.DedicatedServer'

dependencies {
	compile project(':common')
}

processResources {
	dependsOn rootProject.versionTxt
}

jar {
	archivesBaseName = 'server-naked'
	manifest {
		attributes  'Implementation-Title': 'Chunk Stories Server',
					'Implementation-Version': version
	}
	classifier = 'bare'
}

shadowJar {
	baseName = 'server'
	classifier = null
	version = null
	configurations = [project.configurations.runtime]
	
	dependencies {
		//exclude(dependency(group: 'xyz.chunkstories', name: 'core', version: contentRevisionBuiltAgainst, ext: 'jar'))
    }
}

run {
	doFirst {
		/* Need to split the space-delimited value in the exec.args */
		println "Running server; Setting project dir : " + rootProject.projectDir
		workingDir = rootProject.projectDir
		args = [new String("--dir="+rootProject.projectDir), new String("--core=" + rootProject.ext.actualContentLocation)]
		println args
	}

	//Depends on the core content being present.
	afterEvaluate {
		dependsOn(':common:setupContentLocation')
	}
}

/*configurations.archives.with { artifacts.remove artifacts.find { it.archiveTask.is distZip } } 
configurations.archives.with { artifacts.remove artifacts.find { it.archiveTask.is distTar } } 
configurations.archives.with { artifacts.remove artifacts.find { it.archiveTask.is shadowDistZip } } 
configurations.archives.with { artifacts.remove artifacts.find { it.archiveTask.is shadowDistTar } } */
